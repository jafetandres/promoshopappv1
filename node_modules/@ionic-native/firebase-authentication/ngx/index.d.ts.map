{"version":3,"file":"index.d.ts","sources":["index.d.ts"],"names":[],"mappingssourcesContent":["import { IonicNativePlugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs';\n/**\n * @name Firebase Authentication\n * @description\n * Cordova plugin for Firebase Authentication\n *\n * @usage\n * ```typescript\n * import { FirebaseAuthentication } from '@ionic-native/firebase-authentication/ngx';\n *\n *\n * constructor(private firebaseAuthentication: FirebaseAuthentication) { }\n *\n * ...\n *\n *\n * this.firebaseAuthentication.createUserWithEmailAndPassword('test@gmail.com', '123')\n *   .then((res: any) => console.log(res))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nexport declare class FirebaseAuthentication extends IonicNativePlugin {\n    /**\n     * Returns a JWT token used to identify the user to a Firebase service.\n     * @param forceRefresh {boolean} Force Refresh\n     * @return {Promise<any>} Returns the id token\n     */\n    getIdToken(forceRefresh: boolean): Promise<any>;\n    /**\n     * Tries to create a new user account with the given email address and password.\n     * @param email Email\n     * @param password Password\n     */\n    createUserWithEmailAndPassword(email: string, password: string): Promise<any>;\n    /**\n     * Initiates email verification for the current user.\n     */\n    sendEmailVerification(): Promise<any>;\n    /**\n     * Triggers the Firebase Authentication backend to send a password-reset email to the given email address,\n     * which must correspond to an existing user of your app.\n     * @param email Email\n     */\n    sendPasswordResetEmail(email: string): Promise<any>;\n    /**\n     * Asynchronously signs in using an email and password.\n     * @param email Email\n     * @param password Password\n     */\n    signInWithEmailAndPassword(email: string, password: string): Promise<any>;\n    /**\n     * Starts the phone number verification process for the given phone number.\n     * NOTE: Android supports auto-verify and instant device verification.\n     * Therefore in that cases it doesn't make sense to ask for sms code.\n     * It's recommended to register onAuthStateChanged callback to be notified on auto sign-in.\n     * timeout [milliseconds] is the maximum amount of time you are willing to wait for SMS auto-retrieval\n     * to be completed by the library. Maximum allowed value is 2 minutes. Use 0 to disable SMS-auto-retrieval.\n     * If you specify a positive value less than 30 seconds, library will default to 30 seconds.\n     * @param phoneNumber Phone number\n     * @param timeout {number} Timeout\n     */\n    verifyPhoneNumber(phoneNumber: string, timeout: number): Promise<any>;\n    /**\n     * Asynchronously signs in using verificationId and 6-digit SMS code.\n     * @param verificationId Verification ID\n     * @param smsCode SMS code\n     */\n    signInWithVerificationId(verificationId: string, smsCode: string): Promise<any>;\n    /**\n     * Create and use temporary anonymous account to authenticate with Firebase.\n     */\n    signInAnonymously(): Promise<any>;\n    /**\n     * Uses Google's idToken and accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS\n     * @param idToken ID Token\n     * @param accessToken Access Token\n     */\n    signInWithGoogle(idToken: string, accessToken: string): Promise<any>;\n    /**\n     * Uses Facebook's accessToken to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.\n     * @param accessToken Access Token\n     */\n    signInWithFacebook(accessToken: string): Promise<any>;\n    /**\n     * Uses Twitter's token and secret to sign-in into firebase account. In order to retrieve those tokens follow instructions for Android and iOS.\n     * @param token Token\n     * @param secret Secret\n     */\n    signInWithTwitter(token: string, secret: string): Promise<any>;\n    /**\n     * Registers a block as an auth state did change listener. To be invoked when:\n     *    - The block is registered as a listener,\n     *    - A user with a different UID from the current user has signed in, or\n     *    - The current user has signed out.\n     */\n    onAuthStateChanged(): Observable<any>;\n    /**\n     * Set's the current user language code. The string used to set this property must be a language code that follows BCP 47.\n     * @param languageCode Language Code\n     */\n    setLanguageCode(languageCode: string): Promise<any>;\n    /**\n     * Sets languageCode to the appâ€™s current language.\n     */\n    useAppLanguage(): Promise<any>;\n    /**\n     * Signs out the current user and clears it from the disk cache.\n     */\n    signOut(): Promise<any>;\n}\n"]}